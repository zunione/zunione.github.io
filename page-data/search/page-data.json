{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"들어가며 본 포스트는 NeoVim 설치 과정과 간단한 configuration을 담고 있습니다. 여기서 진행하는 설정은 모두 리셋하고 다시 personal config를 셋업할 예정이니 참고하시기 바랍니다. 여러 환경 문제로 VSCode를 사용할 수 없는 난관에 빠졌다.. 개발을 하면서 GUI를 사용할 수 없다니.. 말도 안 돼 😱😱 되는 대로 vim 에…","fields":{"slug":"/neovim-start/"},"frontmatter":{"date":"October 29, 2025","title":"[NeoVim] NeoVim 설치 및 맛보기","tags":["neovim","ide"]},"rawMarkdownBody":"\n## 들어가며\n\n본 포스트는 NeoVim 설치 과정과 간단한 configuration을 담고 있습니다. 여기서 진행하는 설정은 모두 리셋하고 다시 personal config를 셋업할 예정이니 참고하시기 바랍니다.\n\n---\n\n<br>\n\n여러 환경 문제로 VSCode를 사용할 수 없는 난관에 빠졌다.. 개발을 하면서 GUI를 사용할 수 없다니.. 말도 안 돼 😱😱 \n\n되는 대로 vim 에디터를 쓰다가 생산성이 너무 떨어져 대안에 찾아 나섰다. 그렇게 추천받은 에디터가 CUI를 사용하는 NeoVim이다. \n\n처음에는 예쁜 디자인에 끌려 NvChad 디스트로를 설치해 사용해 보았는데, 이미 모든 configuration이 완성되어 있다 보니 나에게 익숙하지 않은 키맵이 너무 많아 그냥 raw vim을 쓰는 것과 크게 다르지 않게 느껴졌다.\n\n나에게 익숙한 건 단연 VSCode. NeoVim을 VSCode 및 윈도우 환경과 최대한 비슷하게 구축하는 것을 목표로 삼고, [유튜브 영상(클릭)](https://youtu.be/KYDG3AHgYEs?si=zX4IFnZvH9rJVbW7)을 참고해 커스터마이징을 시작했다!\n\n`NeoVim으로 개발환경 구축하기` 시리즈에서는 위 영상을 일부 번역하는 동시에 나의 개인 설정을 기록하려 한다. 영상이 매우 잘 설명되어 있어서, 혹시 이 게시물을 참고한다면 영상 또한 시청하는 것을 권장한다.\n\n## NeoVim 최신 Release 다운로드\n\n### 우분투 패키지 다운로드\n\n우분투 패키지 매니저에서 다운로드받을 수 있다. 다만 내가 했을 때는 v0.6.1이 다운로드되는 불상사가 발생했다. 😅\n\n최신 NeoVim은 v0.11.x이며 deprecated된 요소들이 있으므로, 다음 목차에서 소스 코드로 다운로드받는 것을 권장한다.\n\n```bash\nsudo apt update\nsudo apt install neovim\nnvim --version\n```\n\n```\nNVIM v0.6.1\nBuild type: Release\nLuaJIT 2.1.0-beta3\nCompiled by team+vim@tracker.debian.org\n\nFeatures: +acl +iconv +tui\nSee \":help feature-compile\"\n\n   system vimrc file: \"$VIM/sysinit.vim\"\n  fall-back for $VIM: \"/usr/share/nvim\"\n\nRun :checkhealth for more info\n```\n\n### 소스 코드로부터 다운로드\n\n[NeoVim Release(클릭)](https://github.com/neovim/neovim/releases) 페이지에서 `nvim-linux-x86_64.tar.gz` 파일을 다운로드한다.\n\nappimage 파일 자체를 다운로드하는 방법과 압축 파일을 다운로드 하는 방법이 있는데, TAR 압축 파일을 해제하는 것이 더 전통적이다.\n\n```bash\ncd /usr/bin/\n# Latest stable release가 업데이트되었다면 해당 파일을 다운로드한다.\n(sudo) wget https://github.com/neovim/neovim/releases/download/v0.11.4/nvim-linux-x86_64.tar.gz\n(sudo) tar xzvf nvim-linux-x86_64.tar.gz\n(sudo) rm nvim-linux-x86_64.tar.gz\necho \"PATH=/usr/bin/nvim-linux-x86_64/bin:$PATH\" >> ~/.bashrc\nsource ~/.bashrc\n```\n\n설치 이후 설정 커스텀을 위한 디렉토리를 생성하고, PATH 정상 등록과 NeoVim 버전을 확인한다.\n\n```bash\nmkdir -p ~/.config/nvim\ncd ~/.config/nvim\nwhich nvim\nnvim --version\n```\n\n## NeoVim custom config 맛보기\n\n맛보기 부분은 추후 모두 삭제(`rm -rf`)하고 다시 설정을 진행하게 되니 참고용으로만 활용하면 된다.\n\n### `init.lua` 생성\n\nNeoVim의 커스텀 설정은 `~/.config/nvim` 디렉토리에서 이루어지며, 시작점은 `init.lua` 파일이다.\n\n```bash\ncd ~/.config/nvim\ntouch init.lua\nnvim init.lua\n```\n\n```lua\n-- [[ init.lua ]]\n\n-- Enable line number\nvim.wo.number = true\n```\n\n`vim.wo.number`는 vim의 `:set number`와 같은 기능을 하는 설정이다. 이를 저장하고 다시 `nvim` 명령어를 실행하면 사진과 같이 라인 넘버가 나타난다.\n\n![init.lua](image.png)\n\n### 개인 설정을 `options.lua`에서 설정하기\n\n`vim.wo.number`와 같은 설정들을 `options.lua` 파일에 한 데 모아 관리할 수 있다. `init.lua`는 프로그램의 시작점이므로 개인 옵션들은 따로 파일로 빼는 것이 바람직하다.\n\n```bash\ncd ~/.config/nvim\nmkdir lua\ncd lua\ntouch options.lua\nnvim options.lua\n```\n\n```lua\n-- [[ init.lua ]]\n\nrequire 'options'\n```\n\n```lua\n-- [[ lua/options.lua ]]\n\n-- Enable line number\nvim.wo.number = true\n```\n\n이후 `nvim` 명령어를 입력하면 이전과 동일하게 라인 넘버가 나타난다.\n\n## `kickstart.nvim`으로 플러그인 맛보기\n\n`kickstart.nvim`은 NeoVim 커스터마이징의 시작점을 제공하며, LSP 등 복잡한 코드를 요구하는 설정들이 매우 잘 구현되어 있어 참고하기에 좋다. 이후 몇몇 플러그인을 설치할 때 kickstart를 참고할 예정이다.\n\n### Kickstart 시작하기\n\n`nvim` 디렉토리를 삭제하고 `kickstart.nvim`을 클론해서 살펴본다. 이 또한 추후 삭제하게 된다.\n\n```bash\ncd ~/.config\nrm -rf nvim\ngit clone https://github.com/nvim-lua/kickstart.nvim.git nvim\ncd nvim\nnvim init.lua\n```\n\n![lazy.nvim](image-1.png)\n\nNeoVim을 실행하면 사진과 같이 플러그인들이 설치된다. 이때 플러그인 매니저는 `lazy.nvim`을 사용하게 된다. 이전까지 사용되던 매니저는 `vim.plug`나 `packer`였는데, 코드나 구조가 다소 복잡해 대안으로 개발된 프로그램이 `lazy.nvim`이고, 이제는 가장 보편적으로 사용되고 있다.\n\n위 사진에 보이는 화면이 `lazy.nvim`의 플러그인 매니저 창이고, `:Lazy` 명령어로 켤 수 있다.\n\n![init.lua](image-2.png)\n\n`q` 버튼으로 `lazy`의 창을 닫으면 위 사진과 같은 주석과 함께 `init.lua` 파일이 보이게 된다. \n\nkickstart는 특정 배포 버전이 아니라 개인 설정을 위한 시작점을 제공한다는 내용으로 시작하며, 이 `init.lua` 파일의 각종 주석을 잘 읽으면 굉장한 인사이트를 얻을 수 있다! 👻\n\n### 플러그인 추가하기\n\n`init.lua` 파일의 Line 900 중반에 파일 트리 플러그인을 추가할 수 있도록 하는 주석이 있다. 이를 주석 해제한다.\n\n```lua\n-- other plugins..\nrequire 'kickstart.plugins.neo-tree',\n-- other plugins..\n```\n\n저장하고 NeoVim을 재시작하면 플러그인이 설치된다. kickstart의 파일 트리 토글 버튼은 `/`(백슬래시)로, 백슬래시를 누르면 파일 트리가 열린다.\n\n![neo-tree](image-3.png)\n\n파일 트리 플러그인 추가 코드에서 조금 더 밑으로 내려가면 커스텀 플러그인을 import할 수 있는 코드가 있다. 여기를 주석 해제하면 `lua/custom/plugins` 디렉토리에 있는 모든 플러그인이 설치된다.\n\n```lua\n-- { import = 'custom.plugins' },\n```\n\n## 마치며\n\n이제 진짜 custom config를 위해 kickstart도 지워주면 된다. 추후에 코드를 참고하기 위해 다른 디렉토리로 옮겨도 무방한데, 나는 github에서 바로바로 보는 게 편해서 아예 지워 버렸다.\n\nNeoVim을 설정하면서 느낀 건, 설정하는 데는 시간이 좀 걸리지만 확실히 편하다! 나는 맥이랑 윈도우를 모두 사용하는데, 단축키를 내 마음대로 설정할 수 있다 보니 맥/윈도우 단축키 중 내가 편하다고 느끼는 것들을 모두 NeoVim에 이식했다.\n\n확실히 개발자는.. 이런 게 제일 재밌는 것 같다 ㅎㅎ"},{"excerpt":"How to change the favicon? The favicon is located in . If you replace that image, the favicon will change. If you want to change the name of the favicon, change the  property of  in . How to set OG I…","fields":{"slug":"/other-tips/"},"frontmatter":{"date":"May 04, 2021","title":"🤩 4. Other Tips","tags":["hoodie","other-tips"]},"rawMarkdownBody":"\n## How to change the favicon?\n\nThe favicon is located in `static/favicon.png`. If you replace that image, the favicon will change.\n\nIf you want to change the name of the favicon, change the `icon` property of `gatsby-plugin-manifest` in `gatsby-config.js`.\n\n## How to set OG Image?\n\nReplace the `og-image.png` file in the `/static` directory with your own image file.\n\n## Do you have another question?\n\nPlease comment on this article or [open an issue](https://github.com/devHudi/gatsby-starter-hoodie/issues) in the gatsby-starter-hoodie repository. Your participation advances gatsby-starter-hoodie. Thank you 😎.\n"},{"excerpt":"1. Add a post You can add posts by creating a new markdown document in the  path. 1-1. Post file structure There are two ways to add a new document. The first is to create a markdown file for a singl…","fields":{"slug":"/writing-guide/"},"frontmatter":{"date":"May 03, 2021","title":"🤔 3. Writing Guide","tags":["hoodie","writing-guide"]},"rawMarkdownBody":"\n## 1. Add a post\n\nYou can add posts by creating a new markdown document in the `contents/post` path.\n\n### 1-1. Post file structure\n\nThere are two ways to add a new document. The first is to create a markdown file for a single document without a directory. If you are writing about JavaScript, you can create a `about-javascript.md` file in the `contents/posts` directory.\n\nThe second is to create a directory and create an `index.md` file in it. This method is useful when the document contains several additional files such as picture files.\n\nEach file name or directory name becomes a unique address of the document and can be accessed as follows. `https://siteURL/about-javascript`.\n\n### 1-2. Frontmatter\n\nThe Markdown document you create contains the document's metadata called frontmatter.\n\n```\n---\ntitle: \"🤔 3. Writing Guide\"\ndescription: \"How to write and add a post?\"\ndate: 2021-05-03\nupdate: 2021-05-03\ntags:\n  - hoodie\n  - writing-guide\nseries: \"Getting started your blog with gatsby-starter-hoodie\"\n---\n```\n\nAbove is the frontmatter of the document you are currently reading. Among them, title and date are required. It is recommended to enclose the string with spaces in quotation marks.\n\n### 1-3. Writing markdown\n\nIf you have written a Frontmatter, you can write your markdown document under it. gatsby-starter-hoodie supports most Markdown syntax. To learn more about Markdown syntax, see the Mastering Markdown[^1] documentation on GitHub.\n\n## 2. Syntax Highlighting & Katex\n\n### 2-1. Syntax Highlighting\n\nSyntax highlighting based on Prism.JS is supported.\n\n#### Examples\n\nJavascript\n\n```javascript\nconsole.log(\"Hello, world!\")\n```\n\nPython\n\n```python\nprint(\"Hello, world!\")\n```\n\nIt supports a wider variety of other languages. Check it out on the [Prism.js website](https://prismjs.com/).\n\n### 2-2. Katex\n\nIt supports Katex syntax, you can easily express complex formulas.\n\n#### Inline mode\n\n$$E = m c^{2}$$\n\n#### Block mode\n\n$$\n\\int_{0}^{\\infty} f(x) dx\n$$\n\n## 3. Add images to a post\n\nYou can easily embed images using relative paths. It is easy to manage documents containing images by creating a directory.\n\n![Sample Image Caption](sample-image.jpg)\n\nImages are loaded with Lazy Loading, so you can secure fast document loading speed.\n\n> ⚠ The extension of the file must be set to lowercase.\n\n## 4. Tagging\n\n![](tag-example.jpg)\n\nYou can classify and search documents by tag set in Frontmatter. All tags you set can be viewed and searched in `https://siteUrl/tags`.\n\n## 5. Series\n\n![](series-example.jpg)\n\nYou can publish multiple related documents in a series. The series set in Frontmatter is grouped together and shown at the top of the document. This can be useful for serialized documents with an order. Series documents are displayed in ascending order of creation date.\n\nThe current document is also set in a series called `Getting started your blog with gatsby-starter-hoodie`.\n\n[^1]: https://guides.github.com/features/mastering-markdown/\n"},{"excerpt":"Getting started your blog with gatsby-starter-hoodie by following steps below. It's very easy 😉. 1. Create a Gatsby site Make sure you have node.js and gatsby-cli installed on your computer. 2. Start…","fields":{"slug":"/quick-start/"},"frontmatter":{"date":"May 02, 2021","title":"🚀 2. Quick Start","tags":["hoodie","quick-start"]},"rawMarkdownBody":"\nGetting started your blog with gatsby-starter-hoodie by following steps below. It's very easy 😉.\n\n## 1. Create a Gatsby site\n\n> Make sure you have **node.js** and **gatsby-cli** installed on your computer.\n\n```\n$ npx gatsby new my-hoodie-blog https://github.com/devHudi/gatsby-starter-hoodie\n```\n\n## 2. Start dev server\n\n```\n$ cd my-hoodie-blog\n$ npm run start\n```\n\nNow you can access to your blog at localhost:8000.\n\n## 3. Create your own Github repository\n\nGiscus comment widget is based on **Github Discuss system**. So you need your own GitHub repository. Also, if you want to publish your blog through Github Pages or Netlify, the Github Repository is a necessary.\n\nIf you don't know how to create a GitHub repository, follow the [official GitHub documentation](https://docs.github.com/en/github/getting-started-with-github/create-a-repo).\n\n### Add remote repository\n\n```\n$ git init\n$ git remote add origin https://github.com/{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\n```\n\n## 4. Write blog-config.js\n\n```javascript\nmodule.exports = {\n  title: \"MY BLOG\",\n  description: \"Hello, This is my blog\",\n  author: \"YOUR NAME\",\n  siteUrl: \"https://myblog.com\",\n  links: {\n    github: \"https://github.com\",\n    facebook: \"https://www.facebook.com\",\n    instagram: \"https://www.instagram.com\",\n    etc: \"https://www.google.com/\",\n  },\n  giscus: {\n    repo: \"{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\",\n    repoId: \"{YOUR_GITHUB_REPOSITORY_ID}\",\n    category: \"{YOUR_GITHUB_REPOSITORY_CATEGORY}\",\n    categoryId: \"{YOUR_GITHUB_REPOSITORY_CATEGORY_ID}\",\n    mapping: \"pathname\",\n    strict: \"0\",\n    reactionsEnabled: \"1\",\n    inputPosition: \"bottom\",\n    lang: \"en\",\n  },\n}\n```\n\ngatsby-starter-hoodie provides a configuration file called `blog-config.js`. In this file, you can configure blog, biography (profile), and giscus. The website settings you are currently viewing are as above. Configure `blog-config.js` to suit your blog.\n\n### Change profile image\n\nReplace `static/profile.png` with the image you want. To change the image file name, you need to change the source code of `src/components/Bio.jsx`.\n\n## 5. Add your content\n\nMarkdown content is in `contents/posts`. You can write and add your articles like the sample posts here. [Click here](/writing-guide) to see the detail writing guide.\n\n## 6. Deploy your blog\n\n### 6-1 via Netlify\n\nFollow the Connecting to Netlify steps in [A Step-by-Step Guide: Gatsby on Netlify](https://www.netlify.com/blog/2016/02/24/a-step-by-step-guide-gatsby-on-netlify/). It's not difficult.\n\nIf you connect the github repository using Netlify, it is automatically distributed whenever you push it, so it is convenient.\n\n### 6-2. via Github Pages\n\n#### Case 1\n\nIf the repository name is in the form of `{YOUR_GITHUB_NAME} .github.io`, run it below.\n\n```\n$ npm run deploy-gh\n```\n\n#### Case 2\n\nIf the repository name is not in the form of `{YOUR_GITHUB_NAME} .github.io`, run it below.\n\n```\n$ npm run deploy-gh-prefix-paths\n```\n\nIn the above case, you need to change `pathPrefix` in `gatsby-config.js` to your repository name.\n\n### 6-3. other platforms\n\n```\n$ npm run build\n```\n\nYou can build the gatsby website with the command above. The build output is created in the `/public` directory. Deploy the `/public` directory using the command for the platform you want to deploy.\n\n## 7. Cutomize\n\n### Project Structure\n\nYou can customize your own gatsby-starter-hoodie by referring to the following file structure 🙊.\n\n```\n├── node_modules\n├── contents\n│   └── posts // your articles are here\n├── public // build outputs are here\n└── src\n    ├── assets\n    │   └── theme // theme config is here\n    ├── components\n    │   └── Article\n    │       └── Body\n    │           └── StyledMarkdown\n    │               └── index.jsx // markdown styles are here\n    │   ...\n    ├── fonts // webfonts are here\n    ├── hooks\n    ├── images\n    ├── pages // page components are here\n    ├── reducers\n    ├── templates // post components are here\n    └── utils\n```\n"},{"excerpt":"About gatsby-starter-hoodie gatsby-starter-hoodie is a gatsby theme created for writing tech blogs. Markdown, Code Highlighting in various programming languages, and Katex syntax are supported. Also,…","fields":{"slug":"/about-hoodie/"},"frontmatter":{"date":"May 01, 2021","title":"🎇 1. About gatsby-starter-hoodie","tags":["hoodie","about"]},"rawMarkdownBody":"\n## About gatsby-starter-hoodie\n\ngatsby-starter-hoodie is a gatsby theme created for writing tech blogs. Markdown, Code Highlighting in various programming languages, and Katex syntax are supported. Also, you can easily categorize articles into tags and series.\n\nStart your blog with a neatly designed gatsby-starter-hoodie that supports dark mode.\n\n## Features\n\n- Markdown\n- Code Highlighting\n- Katex Syntax\n- Dark Mode (Responsive to the settings of the OS)\n- Tag Categoriazation\n- Series Categorization\n- Responsive Web\n- SEO\n- Giscus\n\n## Let's get started\n\nFollow the [Quick Start](/quick-start)\n"},{"excerpt":"파비콘은 어떻게 변경하나요?  에 파비콘 파일이 위치해 있습니다. 이미지 파일을 대체하면 파비콘을 변경할 수 있습니다. 만약 파비콘 파일의 이름을 변경하고 싶다면,  파일의  에서  속성을 변경하셔야합니다. OG Image 를 설정하고 싶어요.  디렉토리의  파일을 여러분이 원하는 이미지 파일로 대체하세요. 다른 질문이 있으신가요? 이 문서에 댓글을 달거…","fields":{"slug":"/other-tips-kr/"},"frontmatter":{"date":"April 04, 2021","title":"🤩 4. 그 외 팁들","tags":["hoodie","other-tips"]},"rawMarkdownBody":"\n## 파비콘은 어떻게 변경하나요?\n\n`static/favicon.png` 에 파비콘 파일이 위치해 있습니다. 이미지 파일을 대체하면 파비콘을 변경할 수 있습니다.\n\n만약 파비콘 파일의 이름을 변경하고 싶다면, `gatsby-config.js` 파일의 `gatsby-plugin-manifest` 에서 `icon` 속성을 변경하셔야합니다.\n\n## OG Image 를 설정하고 싶어요.\n\n`/static` 디렉토리의 `og-image.png` 파일을 여러분이 원하는 이미지 파일로 대체하세요.\n\n## 다른 질문이 있으신가요?\n\n이 문서에 댓글을 달거나 gatsby-starter-hoodie 레포지토리에 [이슈를 열어주세요](https://github.com/devHudi/gatsby-starter-hoodie/issues). 여러분의 참여가 gatsby-starter-hoodie 를 더욱 발전시킵니다. 감사해요 😎.\n"},{"excerpt":"1. 포스트 추가하기  경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다. 1-1. 포스트 파일 구조 새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면,  파일을  디렉토리에 추가할 수 있습니다. 두번째 방법은 먼저 디…","fields":{"slug":"/writing-guide-kr/"},"frontmatter":{"date":"April 03, 2021","title":"🤔 3. 작성 가이드","tags":["hoodie","writing-guide"]},"rawMarkdownBody":"\n## 1. 포스트 추가하기\n\n`contents/post` 경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다.\n\n### 1-1. 포스트 파일 구조\n\n새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면, `about-javascript.md` 파일을 `contents/posts` 디렉토리에 추가할 수 있습니다.\n\n두번째 방법은 먼저 디렉토리를 생성한 뒤, 디렉토리 안에 `index.md` 파일을 추가하는 것 입니다. 이 방법은 문서 내에 여러 이미지 파일 등 부수적인 파일 여러개가 포함되었을 때 유용합니다.\n\n첫번째 방법으로 생성한 파일명이나, 두번째 방법으로 생성한 디렉토리 이름은 웹사이트에서 고유의 주소를 갖습니다. `https://siteURL/about-javascript` 와 같이요.\n\n### 1-2. Frontmatter\n\n마크다운은 문서의 메타데이터인 Frontmatter 라 불리는 정보를 가지고 있습니다.\n\n```\n---\ntitle: \"🤔 3. 작성 가이드\"\ndescription: \"어떻게 글을 작성하고 추가할까요?\"\ndate: 2021-04-03\nupdate: 2021-04-03\ntags:\n  - hoodie\n  - writing-guide\nseries: \"gatsby-starter-hoodie 로 블로그 시작하기\"\n---\n```\n\n위는 지금 여러분이 읽고 있는 문서의 Frontmatter 입니다. `title` 과 `date` 는 필수 값입니다. 띄어쓰기를 포함된 문자열을 입력할 때에는 따옴표로 감싸는 것을 추천합니다.\n\n### 1-3. 마크다운 작성하기\n\n만약 Frontmatter 까지 작성했다면, 여러분은 그 아래에 마크다운 문서를 작성하면 됩니다. gatsby-starter-hoodie 는 대부분의 마크다운 문법을 지원합니다. 마크다운 작성 방법을 알고 싶다면, Github 의 Mastering Markdown[^1] 문서를 참고하세요.\n\n## 2. 코드 하이라이팅 & Katex\n\n### 2-1. 코드 하이라이팅\n\nPrism.JS 에 기반한 코드 하이라이팅이 제공됩니다.\n\n#### 예시\n\nJavascript\n\n```javascript\nconsole.log(\"Hello, world!\")\n```\n\nPython\n\n```python\nprint(\"Hello, world!\")\n```\n\n그 외 더 많은 언어를 제공합니다. 제공되는 언어를 확인하고 싶다면, [Prism.js 웹사이트](https://prismjs.com/) 를 참고하세요.\n\n### 2-2. Katex\n\nKatex 문법을 지원하여 복잡한 수식도 쉽게 표현할 수 있습니다.\n\n#### 인라인 모드\n\n$$E = m c^{2}$$\n\n#### 블럭 모드\n\n$$\n\\int_{0}^{\\infty} f(x) dx\n$$\n\n## 3. 글에 이미지 추가하기\n\n상대경로를 이용하여 쉽게 이미지를 추가할 수 있습니다. 디렉토리를 생성하고 그 안에 `index.md` 를 추가하여, 글을 추가하는 방법으로 작성해야 이미지 관리가 쉽습니다.\n\n![샘플 이미지 캡션](sample-image.jpg)\n\n이미지는 Lazy Loading 으로 로드되어, 빠른 초기 문서 로딩 속도를 확보할 수 있습니다.\n\n> ⚠ 이미지의 모든 확장자는 소문자여야합니다.\n\n## 4. 태그\n\n![](tag-example.jpg)\n\nFrontmatter 의 태그를 통해 쉽게 문서를 분류하고 검색할 수 있습니다. 여러분의 모든 태그는 `https://siteUrl/tags` 경로에서 확인하고, 검색할 수 있습니다.\n\n## 5. 시리즈\n\n![](series-example.jpg)\n\n여러분이 연관된 여러개의 문서를 작성할 때 시리즈를 사용할 수 있습니다. Frontmatter 에 작성된 시리즈가 같은 문서끼리 묶여 문서 상단에 리스트로 표시됩니다. 시리즈는 일련의 순서가 있는 문서들을 작성할 때 유용하게 사용할 수 있습니다. 시리즈는 문서의 작성 날짜 순서대로 정렬됩니다.\n\n현재 문서는 `gatsby-starter-hoodie 로 블로그 시작하기` 라는 시리즈로 설정되어 있습니다.\n\n[^1]: https://guides.github.com/features/mastering-markdown/\n"},{"excerpt":"아래 단계를 따라서 여러분의 블로그를 시작하세요. 굉장히 쉬워요 😉. 1. Gatsby 사이트 생성 컴퓨터에 node.js 와 gatsby-cli 가 설치되어 있어야합니다. 2. 개발 서버 시작 이제 localhost:8000 으로 여러분의 블로그를 접속할 수 있습니다. 3. Github 레포지토리 생성 Giscus 댓글 위젯은 Github Discuss…","fields":{"slug":"/quick-start-kr/"},"frontmatter":{"date":"April 02, 2021","title":"🚀 2. 빠르게 시작하기","tags":["hoodie","quick-start"]},"rawMarkdownBody":"\n아래 단계를 따라서 여러분의 블로그를 시작하세요. 굉장히 쉬워요 😉.\n\n## 1. Gatsby 사이트 생성\n\n> 컴퓨터에 **node.js** 와 **gatsby-cli** 가 설치되어 있어야합니다.\n\n```\n$ npx gatsby new my-hoodie-blog https://github.com/devHudi/gatsby-starter-hoodie\n```\n\n## 2. 개발 서버 시작\n\n```\n$ cd my-hoodie-blog\n$ npm run start\n```\n\n이제 localhost:8000 으로 여러분의 블로그를 접속할 수 있습니다.\n\n## 3. Github 레포지토리 생성\n\nGiscus 댓글 위젯은 **Github Discuss 시스템** 기반입니다. 따라서 각 블로그 별 Github 레포지토리가 필요합니다. 또한 여러분이 Github Pages 혹은 Netlify 로 블로그를 배포하길 원한다면, Github 레포지토리는 필수입니다.\n\n만약 Github 레포지토리를 생성하는 법을 모른다면, [Github 공식 문서](https://docs.github.com/en/github/getting-started-with-github/create-a-repo) 를 참조하세요.\n\n### 원격 레포지토리 등록\n\n```\ngit remote add origin https://github.com/{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\n```\n\n## 4. blog-config.js 작성\n\n```javascript\nmodule.exports = {\n  title: \"MY BLOG\",\n  description: \"Hello, This is my blog\",\n  author: \"YOUR NAME\",\n  siteUrl: \"https://myblog.com\",\n  links: {\n    github: \"https://github.com\",\n    facebook: \"https://www.facebook.com\",\n    instagram: \"https://www.instagram.com\",\n    etc: \"https://www.google.com/\",\n  },\n  giscus: {\n    repo: \"{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\",\n    repoId: \"{YOUR_GITHUB_REPOSITORY_ID}\",\n    category: \"{YOUR_GITHUB_REPOSITORY_CATEGORY}\",\n    categoryId: \"{YOUR_GITHUB_REPOSITORY_CATEGORY_ID}\",\n    mapping: \"pathname\",\n    strict: \"0\",\n    reactionsEnabled: \"1\",\n    inputPosition: \"bottom\",\n    lang: \"en\",\n  },\n}\n```\n\ngatsby-starter-hoodie 는 `blog-config.js` 라는 설정 파일을 제공합니다. 이 파일에서 블로그 정보, 작성자 프로필, Giscus 설정 등을 작성할 수 있습니다. 여러분 블로그 설정에 맞게 `blog-config.js` 를 설정하세요.\n\n### 프로필 이미지 변경\n\n`static/profile.png` 에 위치한 이미지 파일을 원하는 이미지 파일로 교체하세요. 만약 파일명을 변경하고 싶다면, `src/components/Bio.jsx` 의 소스코드를 수정해야합니다.\n\n## 5. 포스트 추가\n\n마크다운 포스트는 `contents/posts` 경로에 위치해있습니다. 해당 경로에서 글을 작성할 수 있습니다. [여기를 클릭하여](https://devHudi.github.io/gatsby-starter-hoodie/writing-guide) 더 자세한 글 작성 방법을 확인하세요.\n\n## 6. 블로그 배포하기\n\n### 6-1 Netlify 를 통해\n\n[A Step-by-Step Guide: Gatsby on Netlify](https://www.netlify.com/blog/2016/02/24/a-step-by-step-guide-gatsby-on-netlify/) 문서를 참조하여, Netlify 를 Github 레포지토리와 연결할 수 있습니다. 이 과정은 어렵지 않습니다.\n\nGithub 레포지토리와 연결이 되었다면, Github 레포지토리에 변경사항이 발생할 때 마다 자동으로 여러분의 블로그에 배포됩니다.\n\n### 6-2. Github Pages 를 통해\n\n#### 상황 1\n\n레포지토리 이름이 `{YOUR_GITHUB_NAME}.github.io` 형태일 경우, 아래 명령어를 실행해주세요.\n\n```\n$ npm run deploy-gh\n```\n\n#### 상황 2\n\n레포지토리 이름이 `{YOUR_GITHUB_NAME}.github.io` 형태가 아닐 경우, 아래 명령어를 실행해주세요.\n\n```\n$ npm run deploy-gh-prefix-paths\n```\n\n만약 위와 같은 경우 `gatsby-config.js` 에서 `pathPrefix` 를 여러분의 레포지토리 이름으로 바꿔야합니다.\n\n### 6-3. 다른 플랫폼\n\n```\n$ npm run build\n```\n\n위 명령어로 Gastby 웹사이트를 빌드할 수 있습니다. 빌드 결과물은 `/public` 에 저장됩니다. `/public` 디렉토리를 여러분이 사용하는 플랫폼의 배포 명령을 통해 배포해주세요.\n\n## 7. 커스터마이징\n\n### 프로젝트 구조\n\n아래 프로젝트 구조를 참고하여 커스터마이징 할 수 있습니다 🙊.\n\n```\n├── node_modules\n├── contents\n│   └── posts // your articles are here\n├── public // build outputs are here\n└── src\n    ├── assets\n    │   └── theme // theme config is here\n    ├── components\n    │   └── Article\n    │       └── Body\n    │           └── StyledMarkdown\n    │               └── index.jsx // markdown styles are here\n    │   ...\n    ├── fonts // webfonts are here\n    ├── hooks\n    ├── images\n    ├── pages // page components are here\n    ├── reducers\n    ├── templates // post components are here\n    └── utils\n```\n"},{"excerpt":"gatsby-starter-hoodie 에 대하여 gatsby-starter-hoodie 는 기술 블로그를 작성하기 위해 개발된 Gatsby 테마입니다. 마크다운과 많은 프로그래밍 언어의 코드 하이라이팅, 그리고 Katex 문법을 지원합니다. 또한 태그와 시리즈를 통하여 쉽게 게시물을 분류할 수 있습니다. 다크모드를 지원하는 깔끔한 디자인의 gatsby-…","fields":{"slug":"/about-hoodie-kr/"},"frontmatter":{"date":"April 01, 2021","title":"🎇 1. gatsby-starter-hoodie 에 대하여","tags":["hoodie","about"]},"rawMarkdownBody":"\n## gatsby-starter-hoodie 에 대하여\n\ngatsby-starter-hoodie 는 기술 블로그를 작성하기 위해 개발된 Gatsby 테마입니다. 마크다운과 많은 프로그래밍 언어의 코드 하이라이팅, 그리고 Katex 문법을 지원합니다. 또한 태그와 시리즈를 통하여 쉽게 게시물을 분류할 수 있습니다.\n\n다크모드를 지원하는 깔끔한 디자인의 gatsby-starter-hoodie 로 여러분의 블로그를 시작하세요.\n\n## 주요 기능\n\n- 마크다운\n- 코드 하이라이팅\n- Katex 문법\n- 다크모드 (OS 환경설정과 연동)\n- 태그 분류\n- 시리즈 분류\n- 반응형 웹\n- SEO\n- Giscus\n\n## 시작\n\n[빠르게 시작하기](/quick-start-kr) 문서에서 블로그를 세팅하세요.\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}